#!/bin/bash
#
# Dependencies managment
# Author: Romain TRUCHI (https://github.com/truchi)
#
# # depmanager
#
# Checks, diffs, installs or updates your dependencies.
# System, NodeJS, Rust.
#
# # Usage
#
# $ depmanager check --directory ~/my/dir --node ~/my/node.csv
#
# # Configuration
#
# `$DEPMANAGER_DIR="/path/to/your/dir"` # No trailing slash
# Defaults to "$HOME/.config/depmanager"

###################################################
# vars
###################################################

declare -A DEFAULT
DEFAULT[dir]="$HOME/.config/depmanager"
DEFAULT[apt]="apt.csv"
DEFAULT[yum]="yum.csv"
DEFAULT[pacman]="pacman.csv"
DEFAULT[node]="node.csv"
DEFAULT[rust]="rust.csv"

declare -A ARG
ARG[dir]=
ARG[apt]=
ARG[yum]=
ARG[pacman]=
ARG[node]=
ARG[rust]=

declare -A FOUND
FOUND[apt]=
FOUND[yum]=
FOUND[pacman]=
FOUND[node]=
FOUND[rust]=

declare -A DETECT
ARG[apt]=
ARG[yum]=
ARG[pacman]=
ARG[node]=
ARG[rust]=

COMMAND=
QUIET=false
YES=false

TYPES=(apt yum pacman node rust)

NO_COLOR=$(tput sgr0)
BOLD=$(tput bold)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
WHITE=$(tput setaf 7)

CWD=$(pwd)

###################################################
# utils/print
###################################################

print_date() {
  echo ${MAGENTA}[$(date +"%Y-%m-%d %H:%M:%S")]${NO_COLOR}
}

print_error() {
  echo "$(print_date) ${RED}✗${NO_COLOR} $@"
}

print_warning() {
  if $QUIET; then return; fi
  echo "$(print_date) ${YELLOW}!${NO_COLOR} $@"
}

print_success() {
  if $QUIET; then return; fi
  echo "$(print_date) ${GREEN}✔${NO_COLOR} $@"
}

print_info() {
  if $QUIET; then return; fi
  echo "$(print_date) ${BLUE}${BOLD}i${NO_COLOR} $@"
}

print_confirm() {
  echo "$(print_date) ${YELLOW}${BOLD}?${NO_COLOR} $@ ${YELLOW}(Y)${NO_COLOR}"
}

print_version() {
  echo "${YELLOW}v0.0.1${NO_COLOR}"
}

print_summary () {
  echo "${BOLD}${GREEN}depmanager${NO_COLOR} $(print_version)
${MAGENTA}https://github.com/truchi/depmanager${NO_COLOR}"
}

print_help() {
  local command=$(basename $0)

  echo "${BOLD}${BLUE}Usage:${NO_COLOR}
  ${BOLD}${GREEN}$command${NO_COLOR} [-h|--version]
  ${BOLD}${GREEN}$command${NO_COLOR} [-v|--help]
  ${BOLD}${GREEN}$command${NO_COLOR} <command> [options]

${BOLD}${BLUE}Description:${NO_COLOR}
  ${WHITE}Manages your dependencies.

  List packages you depend on in CSV files (system.csv, node.csv, rust.csv).
  Export \$DEPMANAGER_DIR (containing these files) environment variable (defaults to \$HOME/.config/depmanager).${NO_COLOR}

${BOLD}${BLUE}Commands:${NO_COLOR}
  c${WHITE},${NO_COLOR} check                 ${WHITE}Produces a report with regard to the CSV files${NO_COLOR}
  d${WHITE},${NO_COLOR} diff                  ${WHITE}List installed packages yet not in the CSV files${NO_COLOR}
  i${WHITE},${NO_COLOR} install               ${WHITE}Installs packages in the CSV files${NO_COLOR}
  u${WHITE},${NO_COLOR} update                ${WHITE}Updates packages in the CSV files${NO_COLOR}

${BOLD}${BLUE}Options:${NO_COLOR}
  -d${WHITE},${NO_COLOR} --dir <path>         ${WHITE}Blah${NO_COLOR}
  -s${WHITE},${NO_COLOR} --system <path|url>  ${WHITE}Blah${NO_COLOR}
  -n${WHITE},${NO_COLOR} --node <path|url>    ${WHITE}Blah${NO_COLOR}
  -r${WHITE},${NO_COLOR} --rust <path|url>    ${WHITE}Blah${NO_COLOR}
  -q${WHITE},${NO_COLOR} --quiet              ${WHITE}Blah${NO_COLOR}
  -y${WHITE},${NO_COLOR} --yes                ${WHITE}Blah${NO_COLOR}

${BOLD}${BLUE}Links:${NO_COLOR}
  ${WHITE}- Repository${NO_COLOR}             ${MAGENTA}https://github.com/truchi/depmanager${NO_COLOR}
  ${WHITE}- Website${NO_COLOR}                ${MAGENTA}https://github.com/truchi/depmanager${NO_COLOR}
  ${WHITE}- Documentation${NO_COLOR}          ${MAGENTA}https://github.com/truchi/depmanager${NO_COLOR}
"
}

###################################################
# utils/helpers
###################################################

#
# Returns true if $1 starts with /, false otherwise
#
is_absolute() {
  if [[ "$1" =~ / ]]; then
    return 0
  else
    return 1
  fi
}

#
# Returns true if $1 starts with https?://, false otherwise
#
is_url() {
  if [[ "$1" =~ https?:// ]]; then
    return 0
  else
    return 1
  fi
}

#
# Returns true is $1 is set, false otherwise
#
is_set() {
  if [[ ! -z "$1" ]]; then
    return 0
  else
    return 1
  fi
}

#
# Returns true if file $1 exists, false otherwise
#
file_exists() {
  if [[ -f "$1" ]]; then
    return 0
  else
    return 1
  fi
}

#
# Returns true if url $1 exists, false otherwise
#
url_exists() {
  if ! wget -q --spider "$1"; then
    return 0
  else
    return 1
  fi
}

#
# Returns true if $1 is found on the system, false otherwise
#
command_exists() {
  if command -v "$1" >/dev/null 2>&1; then
    return 0
  else
    return 1
  fi
}

###################################################
# utils/functions
###################################################

#
# Sets `ARG[dir]` according to (in this precedence order):
# - cli arg      (relative to current working directory)
# - env variable (relative to home)
# - default path
# Assumes `CWD` is set
#
get_dir() {
  local dir=""

  # If dir is given in args
  if is_set "${ARG[dir]}"; then
    # Use dir arg
    dir="${ARG[dir]}"

    # Relative to current working dir
    if ! is_absolute "$dir"; then
      dir="$CWD/$dir"
    fi
  else
    # If env variable is defined
    if is_set "$DEPMANAGER_DIR"; then
      # Use user's dir
      dir="$DEPMANAGER_DIR"

      # Relative to home
      if ! is_absolute "$dir"; then
        dir="$HOME/$dir"
      fi
    else
      # Use default dir
      dir="${DEFAULT[dir]}"
    fi
  fi

  ARG[dir]="$dir"
}

#
# Sets `ARG[$1]` according to (in this precedence order):
# - cli arg          (relative to current workin directory)
# - default variable (relative to `ARG[dir]`)
# Assumes `CWD` is set
#
make_path() {
  local type="$1"
  local file=""

  # If file is given in args
  if is_set "${ARG[$type]}";then
    # Use file arg
    file="${ARG[$type]}"

    # Relative to current working dir
    if ! is_absolute "$file" && ! is_url "$file"; then
      file="$CWD/$file"
    fi
  else
    # Use default file, relative to ARG[dir]
    file="${ARG[dir]}/${DEFAULT[$type]}"
  fi

  ARG[$type]="$file"
}

#
# Sets `FOUND[$1]` to true if file/url ${ARG[$1]} exists, false otherwise
#
check_file() {
  local type="$1"
  local file="${ARG[$type]}"

  if is_url "$file" && ! url_exists "$file" ; then
    FOUND[$type]=false
  elif ! file_exists "$file"; then
    FOUND[$type]=false
  fi
}

#
# Sets `DETECT$[$1]` to true if the manager is found on the system,
# to false otherwise
#
detect_manager() {
  local type="$1"

  if command_exists "${type}_detect" && ${type}_detect; then
    DETECT[$type]=true
  else
    DETECT[$type]=false
  fi
}

###################################################
# managers/apt
###################################################

#
# Returns true if apt is found on the system, false otherwise
#
apt_detect() {
  if command_exists apt; then
    return 0
  else
    return 1
  fi
}

###################################################
# main
###################################################

#
# Parses args, filling the appropriate global variables
#
parse_args() {
  # Print summary, version and help
  if [[ $# == 0 ]]; then
    print_summary
    echo
    print_help
    exit
  elif [[ $# == 1 ]]; then
    if [[ "$1" == "--version" || "$1" == "-v" ]]; then
      print_version
      exit
    elif [[ "$1" == "--help" || "$1" == "-h" ]]; then
      print_help
      exit
    fi
  fi

  # Get command
  if [[ "$1" == "check" || "$1" == "c" ]]; then
    COMMAND="check"
  elif [[ "$1" == "diff" || "$1" == "d" ]]; then
    COMMAND="diff"
  elif [[ "$1" == "install" || "$1" == "i" ]]; then
    COMMAND="install"
  elif [[ "$1" == "update" || "$1" == "u" ]]; then
    COMMAND="update"
  else
    print_error Unknown command: $1
    exit
  fi

  # Get options
  while [[ $# -gt 1 ]]; do
    case "$2" in
      -d|--dir)
        ARG[DIR]="$3"; shift; shift;;
      -s|--system)
        ARG[SYSTEM]="$3"; shift; shift;;
      -n|--node)
        ARG[NODE]="$3"; shift; shift;;
      -r|--rust)
        ARG[RUST]="$3"; shift; shift;;
      -q|--quiet)
        QUIET=true; shift;;
      -y|--yes)
        YES=true; shift;;
      *)
        print_error Unknown option: $key
        exit
    esac
  done
}

#
# Main
# Parses arguments, resolves files, run specified command
#
main() {
  parse_args $@
  get_dir

  local dir="${ARG[dir]}"
  print_info Depmanager directory: $dir

  for type in "${TYPES[@]}"; do
    make_path "$type"
    check_file "$type"
    detect_manager "$type"

    local message=""
    local file="${ARG[$type]}"
    local found="${FOUND[$type]}"
    local detect="${DETECT[$type]}"

    if $detect; then
      message="manager found, "
    else
      message="manager NOT found, "
    fi

    if $found; then
      message="$message file found ($file)."
    else
      message="$message file NOT found ($file)."
    fi

    if $detect && $found; then
      print_success $type: $message Will proceed.
    else
      print_warning $type: $message Will NOT proceed.
    fi
  done



  # if [[ $QUIET == false ]]; then
    # echo lol
  # else
    # echo suposed quiet
  # fi

  # for a in "${name[@]}"; do
    # echo $a
  # done

  # get_dir
  # echo $DIR

  # get_deps SYSTEM
  # echo SYSTEM: $SYSTEM
}

# Run
main $@


