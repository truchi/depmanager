#!/usr/bin/env bash

NO_COLOR=$(tput sgr0)
# RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
# YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
# MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
# WHITE=$(tput setaf 7)

#
# Builds $1 from ./src in ./dist
#
function build {
  local file="$1"

  echo "${BOLD}${BLUE}i${NO_COLOR} ${BLUE}Building ${CYAN}$file ${BLUE}from ${CYAN}$(realpath ./src)${NO_COLOR}"

  # Get all the files to import
  local paths
  resolve_imports "./src/$file"

  # Concat all the files
  local output
  output=$(concat_files paths[@])

  # Write in dist
  mkdir -p dist
  echo -e "$output" > "./dist/$file"

  echo "${BOLD}${GREEN}✔${NO_COLOR} ${BLUE}Built    ${CYAN}$file ${BLUE}in   ${CYAN}$(realpath ./dist)${NO_COLOR}"
}

#
# Recursively traverses files looking for '# shellcheck source=somefile'
# Populates `paths` array
#
function resolve_imports() {
  local file="$1"
  local dir

  # Assumes shellcheck source directive paths are relative to current file
  dir=$(dirname "$file")

  # Mark $file as imported 
  paths+=("$file")

  # Extract files to import
  # shellcheck disable=SC2207
  imports=($(grep '# shellcheck source=' "$file" | sed 's/# shellcheck source=\(.*\)/\1/'))

  # Resolve imports in imported files
  for import in "${imports[@]}"; do
    # Beware of the infinite!
    ! array_includes "$dir/$import" paths[@] && resolve_imports "$dir/$import"
  done
}

#
# Concats content from $1 files
# Removes some shellcheck directives
#
function concat_files() {
  local files=("${!1}")
  local concatenated=""

  # Concat from $files in reverse
  for i in $(seq $(("${#files[@]}" - 1)) -1 0); do
    concatenated+="$(cat "${files[$i]}")\n\n"
  done

  # Remove some useless directives
  concatenated=$(grep -v '# shellcheck shell=' <<< "$concatenated")
  concatenated=$(grep -v '# shellcheck source=' <<< "$concatenated")
  concatenated=$(grep -v '^. ""$' <<< "$concatenated")

  # Return
  echo "$concatenated"
}

#
# Returns true if $1 is found in $2, false otherwise
#
function array_includes() {
  local needle="$1"
  local array=("${!2}")

  for item in "${array[@]}"; do
    if [[ "$item" == "$needle" ]]; then
      true
      return
    fi
  done

  false
}

build "test.sh"

echo "${BOLD}${GREEN}✔✔✔${NO_COLOR} ${GREEN}Build complete${NO_COLOR}"

