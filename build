#!/usr/bin/env bash

NO_COLOR=$(tput sgr0)
BOLD=$(tput bold)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
# MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
# WHITE=$(tput setaf 7)

#
# Builds $1 to $2, minimify to $3
#
function build {
  local src="$1"
  local dest_dir="$2"
  local minimify="$3"

  src=$(realpath "$src")
  dest_dir=$(realpath "$dest_dir")
  [[ -z "$minimify"      ]] && minimify=true
  [[ "$minimify" == true ]] || minimify=false

  local bname=$(basename "$src")
  local name="${bname%.*}"
  local ext="${bname##*.}"
  local dest="$dest_dir/${name}.${ext}"
  local dest_min="$dest_dir/${name}.min.${ext}"

  echo "${BOLD}${BLUE}i${NO_COLOR} ${BLUE}Building   ${CYAN}$src${NO_COLOR}"

  # Get all the files to import
  declare -a all_imports
  declare -A file_imports
  resolve_imports "$src"

  # Concat all the files and clean
  local output
  output=$(concat_files "$src")
  output=$(clean_directives "$output")

  # Write dest file
  mkdir -p "$dest_dir"
  echo -e "$output" > "$dest"
  echo "${BOLD}${GREEN}✔${NO_COLOR} ${BLUE}Built      ${CYAN}$dest${NO_COLOR}"

  # Check for shellcheck errors
  check_errors "$dest"

  # Write dest min file
  if "$minimify"; then
    echo "${BOLD}${BLUE}i${NO_COLOR} ${BLUE}Minifying  ${CYAN}$src${NO_COLOR}"

    local output_min
    output_min=$(clean_comments "$output")

    echo -e "$output_min" > "$dest_min"
    echo "${BOLD}${GREEN}✔${NO_COLOR} ${BLUE}Built      ${CYAN}$dest_min${NO_COLOR}"

    # Check for shellcheck errors
    check_errors "$dest_min"
  fi
}

#
# Recursively traverses files looking for '# shellcheck source=somefile'
# Populates `all_imports` array
#
function resolve_imports() {
  local file="$1"
  local dir

  # Error if file is not found
  if [[ ! -f "$file" ]]; then
    echo "${BOLD}${RED}✗${NO_COLOR} ${CYAN}$file ${RED}not found${NO_COLOR}"
    echo "${BOLD}${RED}Build failed${NO_COLOR}"
    exit 1
  fi

  # Assumes shellcheck source directive paths are relative to current file
  dir=$(dirname "$file")

  # Mark $file as imported
  all_imports+=("$file")
  file_imports[$file]=""

  # Extract files to import
  # shellcheck disable=SC2207
  imports=($(grep '# shellcheck source=' "$file" | sed 's/# shellcheck source=\(.*\)/\1/'))

  # Resolve imports in imported files
  for import in "${imports[@]}"; do
    # Beware of the infinite!
    import=$(realpath "$dir/$import")
    if ! array_includes "$import" all_imports[@]; then
      file_imports[$file]+=" $import"
      resolve_imports "$import"
    fi
  done
}

#
# Recursively concat files
#
function concat_files() {
  local file="$1"
  local concatenated=""

  # Concat imports
  for import in ${file_imports["$file"]}; do
    concatenated+="$(concat_files "$import")"
  done

  # Concat file
  concatenated+="$(cat "$file")\n"

  # Return
  echo "$concatenated"
}

#
# Removes some shellcheck directives
#
function clean_directives() {
  local string="$1"

  # Remove some useless directives
  string=$(perl -pe 's/# shellcheck (shell|source)=\S*\n+//gm' <<< "$string")
  string=$(perl -pe 's/. ""\n+//gm' <<< "$string")

  # Return
  echo "$string"
}

#
# Removes some shellcheck directives
#
function clean_comments() {
  local string="$1"

  # Remove comments
  string=$(perl -pe 's/^ *#[^!\n].*\n//gm' <<< "$string")
  string=$(perl -pe 's/^ *#\n//gm' <<< "$string")

  # Return
  echo "$string"
}

function check_errors() {
  if command -v shellcheck >/dev/null 2>&1; then
    local shellcheck_success
    shellcheck_success=$(shellcheck -S error "$1" > /dev/null && echo true || echo false)

    if $shellcheck_success; then
      echo "${BOLD}${GREEN}✔${NO_COLOR} ${BLUE}Shellcheck ${CYAN}$1 ${GREEN}has no errors${NO_COLOR}"
    else
      echo "${BOLD}${YELLOW}!${NO_COLOR} ${BLUE}Shellcheck ${CYAN}$1 ${YELLOW}has some errors${NO_COLOR}"
    fi
  fi
}

#
# Returns true if $1 is found in $2, false otherwise
#
function array_includes() {
  local needle="$1"
  local array=("${!2}")

  for item in "${array[@]}"; do
    if [[ "$item" == "$needle" ]]; then
      true
      return
    fi
  done

  false
}

build src/depmanager.sh dist "$1"
echo "${BOLD}${GREEN}Build complete${NO_COLOR}"

